apply plugin: "java"

sourceCompatibility = 1.8
sourceSets.main.java.srcDirs = [ "src/main/java" ]

project.ext.mainClassName = "com.solusgames.stellaraquarii.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../core/assets");

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);

    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

dist.dependsOn classes

eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/core/assets'
        buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
        natures += ['org.eclipse.buildship.core.gradleprojectnature']
    }
    classpath {
        downloadSources = true
        downloadJavadoc = true
        file {
            whenMerged { classpath ->
                classpath.entries.findAll { entry -> entry.kind == 'lib' }*.exported = true
                classpath.entries.removeAll { entry -> entry.kind == 'lib' }
                withXml { classpathXml ->
                    def classpathXmlNode = classpathXml.asNode()
                    classpathXmlNode.appendNode('classpathentry', [kind: 'src', path: 'src'])
                        .appendNode('attributes')
                        .appendNode('attribute', [key: 'FROM_GRADLE_MODEL', value: 'true'])
                    classpathXmlNode.appendNode('classpathentry',  [exported: 'true', kind: 'con', path: 'org.eclipse.buildship.core.gradleclasspathcontainer'])
                }
            }
        }
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  doLast {
    def classpath = new XmlParser().parse(file(".classpath"))
    new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
    def writer = new FileWriter(file(".classpath"))
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(classpath)
  }
}